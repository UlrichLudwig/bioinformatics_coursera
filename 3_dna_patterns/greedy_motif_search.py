from __future__ import division
from itertools import imap, repeat
from Bio.Alphabet import IUPAC
from Bio.Seq import Seq
import sys
from operator import mul, div, itemgetter
from median_string import dist


def prob_profile(kmer, profile):
    return reduce(mul, (profile[i][c] for i, c in enumerate(kmer)), 1)

def profile_most_prob(profile, text, k=None):
    k = k or len(profile)
    max_prob, max_prob_i = 0, 0
    for i in range(len(text) - k + 1):
        prob = prob_profile(text[i:i + k], profile)
        if prob > max_prob:
            max_prob = prob
            max_prob_i = i

    return text[max_prob_i:max_prob_i + k]

def make_profile(motifs, k=None):
    k = k or len(motifs[0])
    profile = [dict(A=1, C=1, G=1, T=1) for i in range(k)]
    for motif in motifs:
        for i in range(k):
            profile[i][motif[i]] += 1
    for i in range(k):
        imap(div, profile[i].itervalues(), repeat(len(motifs) * 2))
    return profile

def prob_motifs(motifs):
    profile = make_profile(motifs, len(motifs[0]))
    return sum(prob_profile(motif, profile) for motif in motifs)

def dist_motifs(motifs, dna):
    return sum(dist(motifs[i], dna[i]) for i in range(len(motifs)))

def score_motifs(motifs, profile=None):
    cons = consensus(profile or make_profile(motifs, len(motifs[0])))
    return sum(sum(1 if m[i] != cons[i] else 0 for i in range(len(m))) for m in motifs)

def consensus(profile):
    return Seq(''.join([max(pos.iteritems(), key=itemgetter(1))[0] for pos in profile]))

def greedy_motif_search(dna, k, t):
    best_motifs = [seq[:k] for seq in dna]
    best_dist = score_motifs(best_motifs)
    for i in range(len(dna[0]) - k + 1):
        kmer = dna[0][i:i + k]
        motifs = [kmer]
        for i in range(1, t):
            profile = make_profile(motifs, k)
            kmer = profile_most_prob(profile, dna[i], k)
            motifs.append(kmer)
        d = score_motifs(motifs)
        print d,
        print ' '.join(map(str, motifs))
        if d < best_dist:
            best_motifs, best_dist = motifs, d
    return best_motifs

def print_motifs(motifs):
    profile = make_profile(motifs, len(motifs[0]))
    consensus = ''.join([max(pos.iteritems(), key=itemgetter(1))[0] for pos in profile])
    score = sum(sum(1 if m[i] != consensus[i] else 0 for i in range(len(m))) for m in motifs)
    print score
    for motif in motifs:
        for m, c in zip(motif, consensus):
            sys.stdout.write(m.upper() if m == c else m.upper())
        print
    print '-' * len(motifs[0])
    print consensus
    print

def main():
    input = '''3 5
    GGCGTTCAGGCA
    AAGAATCAGTCA
    CAAGGAGTTCGC
    CACGTCAATCAC
    CAATAATATTCG'''

    input = '''12 25
    ACGAGAACTGTAATGGAGACCAATCGGGTCGTATGTACGACACGGATCTTCTGTATCGATCATCGCTTAACTTATACGATCTCATTCTCACGACGATCCTCAACCCCGGATACCCGCACTGCCTCAATCCGAAGTACTGCGTAGTACTTTACCCTT
    ACCTGTGATCACTCAGAGAACAGAGGATCCGGGTTGGATGTCAGTGTTATGCCAAGAAACGAGACCTAAGGTGCCGTCCCCGGCGGAATGCTTCTCGCTTCCCCTTCTAAAGGGTCCTGGCAAAATGCTTGTGACTTTGAATGCCCTCACTGAACT
    AAATGTGAAACCTATATCAGTCATTATACCGGCGCGATGTTAACTCGCACCTGATTGCAAGGTCACTGATCGCGTCACTACACTAGAGTTTATTCATACCTGCATGGGGGGCATGATGGATGAATTTTAACTAGGTGATCGTGACCAATGTTCACC
    TTTAACCGAATGAGAAGGGTTTCGTTTTAGGCCGTCGATCCGCCGCTTCTTCTCTCGACTGAATCGGAGGTTTTAATGTGTGTGCTAAAGTGAACTGCCTAATAACCCGCTAGGGGGATGATTTATTGTATCTGCAATGTACGGTGGTACATCCCG
    GCTTTCCCGTGTTCTTCGTGCGCTCGGGACCAGAGATCAGAACTAGTGCTAAAGCCATGGAAGCATTTAGCCGGCCGATGTAGTAAAGTTGCCCATATTTCTCCCTAAACCAGCGTATACGTCGAAAACTTTCTTCACTCCACTATGTATAGATGG
    CGCTTAGCGCATCCTCGCTAAACTAATTTGTAGGAGCAATCGCATGTCGACACCGAGGAAGACAACAAGTACATTAGTTACACGCTTCTTACTGGGGATAAAAATCTAGGATCGCGTGATCGGCGTGCTCCGGCGTCAGGTGACTTGATGGCCCCA
    AGTCATGACAATTCGCACGAGGTGACTTTCAATCGACTTACGTACTGCGCGTCGATGTCGCTTCACTCCACTAATACCCATATTCCTAACACGCCAGTACGGTTCAGAGTCGGCGGCTGAGGGGCCCTAGAAACGAGACACCCTAGAGGCTCTGGG
    ATAATAAACGAGATTTAGTGCTCCAGGTCCCTCTAACTTCGCTAGACTGTTCACGGTACTTAGAGTAGCTCAGAAATCGCCTGTCTTCGGGTTGGTTTTTTCAGGAGGTGCTCTGTGCGTTAACATACCAAGCCATAGCTGCTTTTCCTCTACAAA
    CCTACCGGAGGACTTCACTGAACTAAGTACTGGGGTGCTAAGGTCGAACGAGATGACTGGACCCTACTCTCTACGGGACCGACGCCCCAGGGCTTAATTCATATTGACTAGATTTATGATAATAATAGACTCGGCGGTTTGTAGCTTTCCCCTGAA
    CCGTTACTCCGCCGCTGCTGATCCTACTCCACGTGGGGCCCCCCAATATGCACATCTTATCGTCCCTGGACTGGCAGTTGATGCGAAATAATATTCGTGGGTATGATAACGCGCTATACTGATAGAACCACGGGGACTCCTGTATTCGTCTCGCCA
    ATTCGTGGGTTGAAGCCTTTAAACGGGATGGCCAAGTTGATTGGGTCTAATTGATATTAATTCTGGTGTACTGTACGAGACCGGTGCAGCACGGACGGGCGGTTTCAACAATACTCGTGCGCCTGGAGGGTACCTCGCTGAACTCGCATATCAGGT
    TGGTTACCCTCTCTTCACTTAACTCTTGTATCAAGACGTTTCTGTGAGACAAAGCAATGGCCGGACTTTGGGGCGCGTGCTCTGGAGATCCAAGCACTCGAGGTCAGCGGTATAATATAACGCATCCAACATGCAGACTGTGCGTGGGGGCCCAAA
    CCTTAGCGGTGTCGGCCATCATTTATCGAGCTGGAACTCCGGTGGGTAACGTGGATCCGCAGCAGGCCTTACCGTCACTTAACTTGTTACTAGAACATACGTGGAACCTATGCATGATCGAGATAGAGTGCGCTCCGCGGTACACCGCGCTCTATA
    AGTTACAACACGACAGGAACTATTTGCTAGGCGTTACATCTCTTTACTTTTAGCCCCTGGATTTTGAACGCATGTCAACACGTTCCACCATGGGTATAAGAATGCATGGACAGGGTTAATGAATGTGTCTCGGTCCGTTAGCTGTTACAATATACC
    CTTAGCAGCCCACGTCGCTGGACTGTGTTATATTACGAGGTCGAATAGTGAGGTTAACAGTCTCCGTTGTAACTTAATCCCGATATCACGCAGTGTATATGGTCGCTGTAGCTTTCTGGGCAGCTCGCACACCGCCAATTCGCAGAGGCGACCAGA
    TGGTAATAGGCTTCGAAATAACTCTTGGATTGCAACGAAGGTCCGAGCCTTCTCTGCACTTGGATACATTTTGGACATATGAAAGGATGGGTGCTCGGGATGGGACTTTGGTTGCCTGCAAGACGGCGAGACCACCTTACTGAAACCAACATCTTA
    TTACCGGTAATCTCTGATCGCCCATGCCGTCAGGTGCCTTAATTTAAGCGAGAGCTAAATAGAAAGCTGCGCGGTTTTAGCAAAATGAAGTATCAGGAATAACATGGGTTAATGTCACAAACCTGAGGGTTACCTCTCTGCACTCCAGGTCCAGCA
    AATTCAGCTGGTCAGTCACCACAACGTCTCTAGACTCGCACACCCAACTATTATATCACGTACAAGCCGCCCCACAACCGGCATGATAATGTCTGCACGGCCCAACTAACACGCCAGATGACGTACTTTTCGCGGCAGAGCAGTATTCGAACTCAA
    CGTACCCGTTATACAAGCACCATCTACAAAACGTTAGGTGTCAACGATCGTGGGCCGGACTTAGGGGTGAGACCTTAAAGCACACATTCCCTCCCACATCACTTCACTTGTCAAAAATAAAGTCGAATGATGACTACCTCAATTCCTCGCGAAAGC
    GCTGACACGTATTACGAACCGAGACCAGGCGCGACCCCAACCTGGACTAACAGCTATCCCTTTGTTACTTGGCACGTACGGTCAAATCCCGGTGGAGTTATTTACCGAGGGTGCGCCATGCATCGCTCAACTCCTAATGGTCGCCTGTACTTGGTC
    CGGCCTTGGTCCAATTCATCGTAACATTCTGTGAATCTACGGGTACTACTCGACCACGCTTGCTTCGCTGAGCTGTACCGCAAAATCGAATGGACCCAATAATCTGAATCCTTCGGTATACATCACTAGACTCACGATTCAGTATGCCCTCAATCA
    ATCCGAAACATTCAGTTCCGATGGCAACGACGACCACCCAGCACGCATCATCACTCGACTGACCCTGCTCGAATACAGGCGTATCTAACAACCAGCGGATCCAGGGCCCATGCTGAGGCTATTGTCACTCCCGCCCACCCTGTATGTATTCGGATT
    CCCGGATCGCCCGGTCAAGCACTCCAGGGCTTCAGCGCTGTGTACCTCTCTGCACACTCCGGTGGTGGGCCCCGTCCCTACACTGCGTATTCAAGTGATAGCTCGTACGATCCGCATCGAAGGCTGACTGCCCCTCTACAACAGTGCGCTCGCACT
    CCCGTATGTAGGTGATTAGACCCACCAAGCAATCCGCATGTTGCGTCACCGTAGATATATGCAGCGGTCATTCTTCGCTTGACTCTCTGACTTGCCCATTTAGAAACTATCCACTTAATTCCCCTTGGACTTGGGGCCTGTTTTCGGTCGCTTTGT
    CATTTCTATAAAGCTACAATAATAATCCGCGCTGTCGGCAGACGTGGTACCGACCCTACTCCTACCGTTTGAGAGATGGAGGGTCTTCCCTGAACTAACGGCATGCATGAGAGGGGTACGACCCTGGTACTTCTGAAACCAGCATCCGCGGCGACG'''

    input = '''12 25
    GTACCAGCGTTCGTCCCAATATACTACAGCTTTGTACATATCCCGCTAAGTCCGCAGAGAATGGGTTCATTCTGGTTCATGGCGACGTATTAACATTAAAGCCTTGATGGGTATTGCCAAGACCGGAGAGGAATAAGATTGTGGATACAGACGCGT
    GACAGTCTACAATTCCTCGCCGGTGCCACGGGGAGGAAATATCCTGGTCCAACAAGAGCAAATTGAGCGCCTTAGTAGTGATACCTTCTGATGGGGCATTGCACGCTTCCGCTTAAATAGGTTCGGAGAGCAGTTCACACTTATTGGCGGAGCTCT
    TTGTCCGAATATCGACGCCTAAGTGCGCGCAATTTTGTACGGAGACCAGGATGCACCAGGAGCCCACGGCGTGTAAGTCTCGCCCCCGAATTATGGTTCGGTAATAGCGATGCGGGACGTCGAGCTCGGGTACTGACTCCAGTCTTTTGTGGTTAC
    AGTCCAGTAGCGCCAGGTCTCGAAAAATGGCAGTGAGGTCGGAGATCATCACCGTTACACGAGATTCGTGCGGTAGTGACCCCACGCCGGGGCTCCGTCGTACGTCCACCACGAAGGCGTAAATGTTCGTCGCGACACATTAACTAGGGAGGGGGC
    TTGCACTCTTATAGATGCGGTATCCGGTGGCCCAGACGCGAGACACTAGAACGGAGAGTAAGACTTACACTCTCTATGTGACATTAACTGCAGCCCCAGTTGGGTAGATCTTTCAACGCCGGCGCCGTAACGTACGGTAGCCTAGAGAAATTTGAC
    ATGATGCGGGACCCAGGCCTTTACGTGCGGAGAGCACTTGCTCCGGCATCTCGAGATATTAGCCGTACTGGATGTTAGAGCCGGCTTGCGTCTTGTATTTCGGTATTCACAGGTGACTCTCGACGTGCGAATTATAGTGCCAACATCCGCGCTGCT
    GTCGGCGACGACTCCCCTGCCTTAAGTGGGTAACTGGATCGGAGACTAGTTCACACTATTCGGGACTTTGGCCTGCGAACCCCACCCCATTTGTGAACAGTACGAGCCAGCCCTAACACGATGCAACGATGTACTCTACGGTGCGGTCCCTACCTG
    GGAGTAAATAGTCATTAGAGTTGTGTCCGGAGAGCATAGCTAGTCATCTACCAAATGGATCATTGCGCGAAGGGCGTTGGAAGGTACGGGGCGCACAAACCGACGCCGCCGTAGCATCGAGGTACTACACCTATGCTCCGTTCGGGTCTCTAACAC
    TCTGAGAGACCTGTGCGGAGATCACTGTTGTTGGGTTATGCCACAATTTTTCCATAACAAAAATCGGTATATTTTTGTTCACGAACAACTATGTACCAAATCGACCCCAGTAGCATTACCTCCGAGCCAGTGGAGTTTATTTCGGTATAGTCTTGA
    GGTCGGAGAATACTTGACCGAAGAGTTCCCATCTACGTGCGGCAAACCATCTTATACTACACCTATAGCTGGGGAAGTCTCGCAGATTCACTCGTTTGGTCGCGCCTTCGATTGTGAGGAGGGATAGCCCGACAGAAGGAGAGCCCACTTGGTAGG
    GGCTGCAGAAACCGCGCGTACGCGTCGCGGAAGCGCGTGGTTATTAAAATCAGAACTCCAGTTTTACGCGTTTTCACCGGATTAGCACGGAGAGTATGCAGATAACGTAAGTTGCACTGTTCTCGGCCACTACGGACTCGATAAGGTGAGTAGTCG
    AGTCGGCGACTCAATACAGGGACTGTAGGCTGGAGCGCCCGGAGAGAATTTCCACTTGCAGGGGACCGTTAAATTCAAATGGGCAAAATATTCTTCTCAAGACCTTCAGGCTCCTCCCAGTCTCACGGCTCGTGCTCCCACGGGTACCCCGGATTG
    CCATTAAAACTAACCGAAGACTTTTCACTTACTCAGTCCCGGGGGGGTTCTGATAATCGTTTTAAACGTGTATAGTGGTGGAGGGTCCGGAGATCACATGCATCACACCCGTAAACCCAAAACGCCTTGGAGCGATTCGGTGTGATGTGATTAATT
    TAGACCCTGGGCACTTGGCTCGTTGTCTCTATGTCAGTTTACGTCTTAACAACGTTAACCCCCAAACGAGAGTTCAGGCTAGCTGACATTTGGATGTCACCGATAACCGACCGGAGAACATGAGCATGATAGCTGCTGGTGATCACGGTTCCTGAG
    TCGGGGTTGGACGGCATTATCGTGATACCACTCTGTGTAGCCGCGACCAAGCAGTTTTTGAGTGACTGCCTGGCTCCAATCTACGCACGGAGACAACTCGGGCATGATAGTGGTAGTCACCATCCCGCGAAGACTAGTTCTTACCCTATACGCAGT
    GTGATTCTGGTTATAGTTGATAGGAGCCAACATTATTGTCCACCGATACCTAATCCATCTGTGGAGAATAATAGTCAGAGTCAGTAATCAGAATTCCTTCGTACTGTGGTACGGAGATGACTTGGCTTACTGAGCGCATTATAGCACCACAATGTT
    CGCCAGAGCCACGTCTTGCTGGCCGAAATCCGTAGAAAGAGAGCGGTCCTTCCCGAGTCAGGACGGAGACGACTGGGGGACCCGGTTGCCACCCAACCGATTCGGTCCGACGTCTTCAAGACAGCCAAGTGAGGCATCTTCTAAATCGAAGTTAGC
    ATATGCTAGATTTATGCTCTGACAACACGGTCTAAGGGCAAAGGCATGGTTGTAAATGATACTCTCCGGGATATTAGTTCCAAGATACTGGTCCTGGTTCGGAGACGAATCCCATACAAGGGGGGGGACGGTCCTCCGACTGGGATTAGCTGGGTG
    ACACGAGAATATGATTTTCGCCGCCATTTCTCGCATATTGCGATCAAGGTTCGGAGAATAGCGATACTCCTTTAGACCCCTCACCTGCGGAAAGAAGCGCGGTGGGAGTATGACAGGCCGCTGAATCCTTAACAGAGGCCGGACGACGCTCTTCTT
    AATTGCTTCAAATCGCCTATCACAACGCACCACTTACATAAAAGGGTAACCAACTTCCTTAGCGCGAGCAATGGCCGGAGATCACTTAGTTGGGAACGGGCTTTAAGTTTCTGGTTTACTGAGTCTGAGAAGTGCAGGTAATTCTACTCACCCATG
    ACCGCGTTATCGCCCACTCGCGCAGTTCGGAGAGTAGCTTGTCCGATGGAAGTGTCAACTAGCATACTTTCAATGTAATACAAGATAGTACCCCACATCTAGAGGTCCATCTCCCGATCTTCCCCAGTTTGTTTATAGATACGTGTACTCGCTTGA
    TATGGAGGTTCCGGATAAAGTGGCGCGCGGAGAGCATCAACCCCTGCCTTGAACGTCCTATCTCCATTTATTTAAGGAAGTCTTGGAATGTAGAGCCCGCGAATGGCCACAGACGGTGTTTTACCTCCTTCGGTCATCGAGGTAAGCACACATAAA
    AGATGAATGTCAAGCGGGGTACAACGGGAGTCCATTGTCAGGATCCACTTTGCACCATCGCACAAGCACCAATATGGCACTTCAGGGCGGAGAGGAGCCCGGCCGACCATAGACAAGGTTTGGCAAACATAGCAGTACGGCACTGGAGCGGAACAG
    ACACACCTGACCCTAGATCTGCCCATAATAGTTAGTTGGTCACGCAGGCCGGATGCATATTTAACGCCTCTACTCCCCCTTTAAAAGGGTACACGTATTGTGCCACAACTCCATTCCCCGGCTCGCACCTACGGGATACTGGCCGTCCGGAGAGTA
    CATAGGTCAGCTTTGGGTGGGAAGCATTGCTTATAGCCGTTACGAGAGCTCATACGGAGCGAACCTTTAGATAATGGAAGTTCTCTATTGATACGAAGAAGTCTGCTGGCTCGGAGAGTAGGTCACAGACACTGCGGGCTGAACAGGCTTCTCCCT'''

    input1 = '''15 10
    atgaccgggatactgatAgAAgAAAGGttGGGggcgtacacattagataaacgtatgaagtacgttagactcggcgccgccg
    acccctattttttgagcagatttagtgacctggaaaaaaaatttgagtacaaaacttttccgaatacAAtAAAAcGGcGGGa
    tgagtatccctgggatgacttAAAAtAAtGGaGtGGtgctctcccgatttttgaatatgtaggatcattcgccagggtccga
    gctgagaattggatgcAAAAAAAGGGattGtccacgcaatcgcgaaccaacgcggacccaaaggcaagaccgataaaggaga
    tcccttttgcggtaatgtgccgggaggctggttacgtagggaagccctaacggacttaatAtAAtAAAGGaaGGGcttatag
    gtcaatcatgttcttgtgaatggatttAAcAAtAAGGGctGGgaccgcttggcgcacccaaattcagtgtgggcgagcgcaa
    cggttttggcccttgttagaggcccccgtAtAAAcAAGGaGGGCcaattatgagagagctaatctatcgcgtgcgtgttcat
    aacttgagttAAAAAAtAGGGaGccctggggcacatacaagaggagtcttccttatcagttaatgctgtatgacactatgta
    ttggcccattggctaaaagcccaacttgacaaatggaagatagaatccttgcatAcTAAAAAGGaGcGGaccgaaagggaag
    ctggtgagcaacgacagattcttacgtgcattagctcgcttccggggatctaatagcacgaagcttActAAAAAGGaGcGGa'''

    k, t = map(int, input.split('\n')[0].split())
    dna = [Seq(line.strip(), IUPAC.unambiguous_dna) for line in input.upper().split('\n')[1:]]

    best_motifs = greedy_motif_search(dna, k, t)

    print
    print 'Mine:',
    print_motifs(best_motifs)

    #print
    #print 'Theirs:', \
    #print_motifs('''CATCGCTTAACT
    #CCTCACTGAACT
    #CGTCACTACACT
    #CTTCTCTCGACT
    #CTTCACTCCACT
    #CCTCGCTAAACT
    #CTTCACTCCACT
    #CTTCGCTAGACT
    #CTTCACTGAACT
    #CGTCCCTGGACT
    #CCTCGCTGAACT
    #CTTCACTTAACT
    #CGTCACTTAACT
    #CATCTCTTTACT
    #CGTCGCTGGACT
    #CTTCTCTGCACT
    #CCTCTCTGCACT
    #CGTCTCTAGACT
    #CATCACTTCACT
    #CATCGCTCAACT
    #CATCACTAGACT
    #CATCACTCGACT
    #CGTCCCTACACT
    #CTTCGCTTGACT
    #CTTCCCTGAACT'''.split())

    print
    print_motifs('''GTCCGCAGAGAA
    GTTCGGAGAGCA
    GTACGGAGACCA
    GGTCGGAGATCA
    GAACGGAGAGTA
    GTGCGGAGAGCA
    GATCGGAGACTA
    GTCCGGAGAGCA
    GTGCGGAGATCA
    GGTCGGAGAATA
    GCACGGAGAGTA
    GCCCGGAGAGAA
    GTCCGGAGATCA
    GACCGGAGAACA
    GCACGGAGACAA
    GTACGGAGATGA
    GGACGGAGACGA
    GTTCGGAGACGA
    GTTCGGAGAATA
    GGCCGGAGATCA
    GTTCGGAGAGTA
    GCGCGGAGAGCA
    GGGCGGAGAGGA
    GTCCGGAGAGTA
    GCTCGGAGAGTA'''.split())

    #print
    #print 'Theirs:',
    #print print_motifs('''TTC
    #ATC
    #TTC
    #ATC
    #TTC'''.split())

    #lines = [''.join(line.split()) for line in '''T   C   G   G   G   G   g   T   T   T   t   t
    #   c   C   G   G   t   G   A   c   T   T   a   C
    #   a   C   G   G   G   G   A   T   T   T   t   C
    #   T   t   G   G   G   G   A   c   T   T   t   t
    #   a   a   G   G   G   G   A   c   T   T   C   C
    #   T   t   G   G   G   G   A   c   T   T   C   C
    #   T   C   G   G   G   G   A   T   T   c   a   t
    #   T   C   G   G   G   G   A   T   T   c   C   t
    #   T   a   G   G   G   G   A   a   c   T   a   C
    #   T   C   G   G   G   t   A   T   a   a   C   C'''.upper().split('\n')]
    #print score_motifs(lines)

if __name__ == '__main__':
    main()